@page "/"
@rendermode InteractiveServer

<PageTitle>DD8 - Login</PageTitle>

<div class="content">
    <h2 class="div-title">
        <span class="text-title">Projeto Azul</span>
        <span class="text-span">| 522 arquivos</span>
    </h2>

    <div class="status-box">
        <p> Em andamento</p>
    </div>

    <div class="button-container">
        @foreach (var target in targets)
        {
            <button class="btn @(target == activeTarget ? "active" : "")" @onclick="() => SetActiveTarget(target)">
                @target
            </button>
        }
    </div>

    <MudText Class="area-text">Áreas</MudText>
    
    <!-- Carousel -->
    <MudCarousel TData="object" Class="mud-carousel-container" Style="height:300px;" ShowArrows="true" AutoCycle="false">
        <MudCarouselItem>
            <div class="carousel-container">
                @foreach (var item in carouselItems)
                {
                    <MudCard class="div-carousel-card">
                        <MudCardContent class="wrap-card">
                            <MudIcon Icon="@item.Icon" Size="Size.Large" />
                            <MudText Typo="Typo.h6" class="text-card-title">@item.Title</MudText>
                            <MudText Typo="Typo.subtitle1" class="text-arquivos">@item.FileCount arquivos</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </MudCarouselItem>
    </MudCarousel>

    <!-- Grid de busca e botões -->
    <MudGrid Spacing="0" class="div-grid-search">
        <MudItem xs="12" sm="6">
            <div class="input-container">
                <MudIcon Icon="@Icons.Material.Filled.Search" Class="icon-search" />
                <MudTextField T="string" Placeholder="Pesquisar Arquivo" FullWidth="false" Class="div-input-search" />
            </div>
        </MudItem>

        <MudItem xs="6" sm="3" Class="div-btn-up">
            <MudText class="text-ultimo-up">Último upload em</MudText>
            <MudText class="text-ultimo-up">24.04.2024, às 13h45 GMT</MudText>
        </MudItem>

        <MudItem xs="3" sm="1" Class="div-btn">
            <MudButton Variant="Variant.Filled" Class="btn-input btn-input-buscar text-btn">
                Upload
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="icon-custom" />
            </MudButton>
        </MudItem>

        <MudItem xs="3" sm="1">
            <MudButton Variant="Variant.Filled" Class="btn-input btn-input-limpar text-btn">
                Deletar
                <MudIcon Icon="@Icons.Material.Filled.DeleteOutline" Class="icon-custom" />
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudContainer class="container-mud">
        <MudPaper class="mudpapper-div">
            <MudText class="mudpaper-text">
                Último DeepDive do projeto executado em 24.04.2024, às 13h45 GMT
            </MudText>
        </MudPaper>
    </MudContainer>

    <!-- Cabeçalho Conteúdo Principal -->
    <MudContainer Class="container-alinhamento">
        <MudCheckBox T="bool" @bind-Value="Dense_CheckBox" Dense="false" Color="Color.Primary"></MudCheckBox>

        <MudButton Variant="Variant.Text" Class="btn-ordenar ordenar-tipo-nome">
            Nome
            <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Class="icon-ordenar" />
        </MudButton>
        <MudButton Variant="Variant.Text" Class="btn-ordenar">
            Compatível
            <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Class="icon-ordenar" />
        </MudButton>
        <MudButton Variant="Variant.Text" Class="btn-ordenar">
            Tipo
            <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Class="icon-ordenar" />
        </MudButton>
        <MudButton Variant="Variant.Text" Class="btn-ordenar">
            Data de Upload
            <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Class="icon-ordenar" />
        </MudButton>
        <MudButton Variant="Variant.Text" Class="btn-ordenar">
            DeepDive
            <MudIcon Icon="@Icons.Material.Filled.UnfoldMore" Class="icon-ordenar" />
        </MudButton>
    </MudContainer>

    <!-- Conteúdo Principal -->
<!-- Conteúdo Principal -->
@foreach (var index in Enumerable.Range(0, 6))
{
    <div class="linha-container">
        <MudCheckBox T="bool" @bind-Checked="isChecked" Class="check-box-style" />
        <MudText Class="text-arquivos">Arquivo número @index - nome do arquivo @index</MudText>
        
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => ToggleStatusLista(index)" 
        Class="btn-toggle-status">
            @(statusLista[index] == "validar" ? "Sim" : "Não")
        </MudButton>
        
        <MudText Class="text-arquivos">.pdf</MudText>
        <MudText Class="text-arquivos">21.08.2024 às 13h45 GMT</MudText>

        @if (statusLista[index] == "remover")
        {
            <MudButton Variant="Variant.Filled" Class="button-status" OnClick="() => HandleRemove(index)">
                <img src="/assets/images/img-remover.png" width="25px">
            </MudButton>
        }
        else if (statusLista[index] == "validar")
        {
            <MudButton Variant="Variant.Filled" Class="button-status" OnClick="() => HandleValidate(index)">
                <img src="/assets/images/img-validacao.png" width="25px">
            </MudButton>
        }
        else if (statusLista[index] == "realizando")
        {
            <MudButton Variant="Variant.Filled" Class="button-status" OnClick="() => HandleWorking(index)">
                <img src="/assets/images/img-traco.png" width="25px">
            </MudButton>
        }
            else if (statusLista[index] == "realizando")
        {
            <MudButton Variant="Variant.Filled" Class="btn-icone btn-icon-working" OnClick="() => HandleWorking(index)">
                <MudIcon Icon="@Icons.Material.TwoTone.Close" />
            </MudButton>
        }

        <MudButton Variant="Variant.Filled" Class="button-status" OnClick="() => HandleDelete(index)">
            <MudIcon Icon="@Icons.Material.Filled.Delete" />
        </MudButton>
    </div>
}

@code {
    
    private List<string> statusLista = new List<string> { "remover", "validar", "realizando", "remover", "validar", "validar" };

    
    private void HandleRemove(int index)
    {
        Console.WriteLine($"Removendo o arquivo {index}");
     
    }

   
    private void HandleValidate(int index)
    {
        Console.WriteLine($"Validando o arquivo {index}");
       
    }

 
    private void HandleWorking(int index)
    {
        Console.WriteLine($"Arquivo {index} está em andamento");
        
    }

  
    private void HandleDelete(int index)
    {
        Console.WriteLine($"Deletando o arquivo {index}");
        
    }


    private void ToggleStatusLista(int index)
    {
        
        if (statusLista[index] == "validar")
        {
            statusLista[index] = "remover";
        }
        else
        {
            statusLista[index] = "validar";
        }
    }
}

@code {
    private List<string> targets = new List<string> { "TARGET 1", "TARGET 2", "TARGET 3" };
    private string activeTarget = "TARGET 1";
    private bool isChecked { get; set; } = true;
    public bool Dense_CheckBox { get; set; } = true;
    private bool isYes { get; set; } = true;

    private List<bool> statusList = new List<bool> { true, false, true, false, true };

    protected override void OnInitialized()
    {
        activeTarget = targets.FirstOrDefault() ?? activeTarget;
    }

    private void SetActiveTarget(string target)
    {
        activeTarget = target;
    }

    private void ToggleStatus(int index)
    {
        statusList[index] = !statusList[index];
    }

    private string GetButtonClass(int index)
    {
        return statusList[index] ? "btn-sim" : "btn-nao";
    }

    // Items do Carousel
    private List<ItemModel> carouselItems = new List<ItemModel>
    {
        new ItemModel { Title = "Societário", Icon = Icons.Material.Filled.BusinessCenter, FileCount = 10 },
        new ItemModel { Title = "Contratos", Icon = Icons.Material.Filled.Description, FileCount = 10 },
        new ItemModel { Title = "Seguros", Icon = Icons.Material.Filled.Security, FileCount = 10 },
        new ItemModel { Title = "Bancário", Icon = Icons.Material.Filled.AccountBalance, FileCount = 10 },
        new ItemModel { Title = "Tributário", Icon = Icons.Material.Filled.AttachMoney, FileCount = 10 },
        new ItemModel { Title = "Trabalhista", Icon = Icons.Material.Filled.Work, FileCount = 10 },
        new ItemModel { Title = "Contencioso Cível", Icon = Icons.Material.Filled.Gavel, FileCount = 10 },
        new ItemModel { Title = "Imobiliário", Icon = Icons.Material.Filled.Home, FileCount = 10 },
        new ItemModel { Title = "Ambiental", Icon = Icons.Material.Filled.Home, FileCount = 10 },
        new ItemModel { Title = "Regulatório", Icon = Icons.Material.Filled.ContentPaste, FileCount = 10 }
    };

    private class ItemModel
    {
        public string? Title { get; set; }
        public string? Icon { get; set; }
        public int FileCount { get; set; }
    }
}

</div>